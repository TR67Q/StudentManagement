アドバンスド　第2回

クラウド　
インターネット上に存在する大規模なデータセンターやサーバーによって、
リソースやサービスを提供するコンピューティング
アプリケーションを全世界に公開、転職活動に必要
デプロイ

・オンデマンド性
必要な時だけ必要な分だけ費用を支払う
規模感のイメージ？

・スケーラビリティ
アプリケーションの需要に応じてリソースの利用料を柔軟に増減させる
最初はスモールスタート、サーバーレンタル
Web開発のハードルがクラウドの登場で下がっていった

・共有リソース

・IaaS
・PaaS　キントーン、セールスフォース
・SaaS　スプレッドシート、Office365

・セキュリティリスク
・プライバシー
・依存性
・データ移行の複雑さ

最小権限の原則、IAM
























スタンダード第58回

検索条件の追加
申込状況機能の追加

各クラスのテスト
MySQL,Postmanの動作チェック

課題の進捗管理
調査、検証

他の勉強との兼ね合い
集中して作業できるのが1-2h

アドバンスド受講予定　AWS

スタンダード第36回　1on1

・REST_API
・受講生情報CRUD処理、Thymeleaf
・ChatGPTの使い方
・コードが散らかっている
・オーバーフェッチとアンダーフェッチ
　大規模なリクエスト、高トラフィック
　どうやってテストする？
　インフラエンジニア　AWS
・バージョン管理
・Postmanとは？
　REST＿APIにリクエストを送る
・実際の現場ではどのくらい使われている？

リアクト、META
リコイル

ワードプレス、NEXTJS



スタンダード第43回

・Postman
・MapperXML
　コードが短くなった
・開発プロセス
　大変そう、そんなに年単位のプロジェクトが多いの？
・ドキュメント
　テスト工程、クラス図
・開発環境
　IntelliJ,MySQL,Postman,localhost,検証環境（ChatGPT）
　同時に？　→　２枚
・swagger
・入力チェックはどこまでやるの？適当な値を排除
　Valid,NotBlank,Pattern
・例外処理
　どこでエラーが発生したか？
・コードの書き方、まとめ方　→　他の人が見て分かるようにする
・第45回が意味不明
　JUnit,Assertion,Mockito_Service

・テスト　作った関数、挙動を言語化、正常と異常の挙動チェック
　→　確認、テストを行いながらリファクタリング、中身が変わっちゃうことも
    デグレード、悪くなっちゃう
    テストをしてからリファクタリング

・システムを依頼する側　→　テストケース