スタンダード第44回　テストとテスト手法

・自動テスト
　今まではプログラムが動くかどうかをチェックしていた
　今後はテストプログラムを自分たちで作成します
　プログラムの仕様や作成したメソッド、クラスを一番理解しているのが作成者なので
　テストまでやる

・なぜやるのか？　→　疎かにすると問題発生時手戻りが大きくなる
　製品が期待通りに動作することを確認するため

（例）車の製品検査
・アクセルを踏んで、前に進む？
・ブレーキを踏んで、止まる？
・アクセルを踏み込みすぎたら、自動ブレーキをかかる？
・衝撃が加わっても、シートベルトは取れない？
・エアバッグは動作する？　など

　Webシステムの開発において
　ネット銀行へアクセスする際にパスワードが誤っていてもログインできてしまうバグがあり、
　テストを行っていないことで、開発者がそのバグを見逃してしまう可能性

（例）Webシステムのテスト
・Sign in ボタンを押下し、メールアドレスとパスワードが一致していれば、ユーザーページに遷移するか？
・Sign in ボタンを押下し、メールアドレスとパスワードが一致しなければ、Sign in ページに戻るか？
・パスワードのバリデーションは機能するか？　など

　正常な動作だけでなく、異常が発生した際の例外処理が行われているかを確認する必要もある

・テスト設計
　何をするか、ではなく、何をしないか？
　どこまでの事例を想定するか？　天変地異や対応時間にも配慮するか？

〇機能テスト
　システムの機能が仕様通りに動作するか確認するテスト

（例）ユーザーインターフェースのテスト
・システム画面のレイアウトが期待通りであるか
・フォントの大きさや色、ボタンや画像などの配置が正しいか
・フォームのバリデーションが動作するか　など

・手動テスト
　ユーザーがシステムを操作する際の手順や流れを手動でテストすること

・ユーザーの入力に対して正常な応答を返すかを確認するか
・商品の詳細ページで「カートに追加」ボタンが正常に動作するか
・商品の検索ページで「絞り込みフィルター」が正常に動作するか　など

・データ処理のテスト
　システム側の処理により、正しいデータの処理を行うかをテストすること

・購入処理を行った結果、購入履歴としてデータが保存されるか
・過去の購入履歴を取得できるか
・購入した商品を返品し、購入履歴のステータスを返品済に変更できるか　など

〇非機能テスト
　システムの性能や品質に関するテストで、機能テスト以外の要件をテストすること

・パフォーマンステスト
　システムが要求される負荷やユーザー数に耐えられるかどうかを検証するテストのこと

・10万ユーザーから同時アクセスがあっても、応答時間0.1秒以内にレスポンスを返す
・11万ユーザーを超える同時アクセスがあった場合は、1000名ずつアクセス順にレスポンスを返す　など

・セキュリティテスト
　システムが安全に動作するかどうかを検証するテストのこと
　ただし、セキュリティを強めると使い勝手が悪くなるので、対応できないケースを決めておくことが大事

・同じIPアドレスから不正なリクエストが大量に送られた場合、そのIPアドレスからのリクエストをブロックする
・不正ログインが検知された場合に、ユーザーのメールアドレスあてに確認通知を送る
・サーバーへの直接アクセスができないことを確認する　など

・互換性テスト
　システムが様々なデバイスやブラウザで動作するかを確認するテストのこと

・ECサービスはChrome/Firefox/Safariで使用できることを確認する
・iOS/AndroidのアプリでもECサービスを使用できることを確認する　など

・可用性テスト
　システムが使用可能な状態である時間/割合を確認するテストのこと
　ふつうは複数のサーバーが用意されているがサーバー数が多くなるほどコストがかかる
　テストは比較的容易だが、どこまでの事態を考慮するかを考えておく

・ECサービスのサーバーが落ちた際の、ダウンタイムが1分以内であるか
・ECサービスのサーバーが落ちた際の復旧時間を確認する
・ECサービスの1つのサーバーが落ちても、別サーバーで処理を継続できることを確認する　など

・機能テストと非機能テストについては、システムの要求に応じて、必要なテストを実施することが重要

〇テスト手法

・単体テスト
　プログラムを構成する小さな単位（ユニット）が個々の機能を正しく果たしているかを検証するテストのこと

・ホワイトボックステスト
　プログラムの構造やエンジニアが作成したロジック、制御の流れなどが内部の処理も含めて正常かどうかを検証する

・ブラックボックステスト
　プログラムの構造など内部を考慮せずに期待通りの結果を返すか検証する

・結合テスト
　単体テストを終えたモジュールを組み合わせて、正しく動作するかを検証するテストのこと

・ビッグバンテスト
　全てのモジュールを一度に組み合わせてテストする、全体の結合に問題ないことを確認する

・トップダウンテスト
　上位モジュールから順に結合テストを行う、下位モジュールはダミーなどに置き換える

・ボトムアップテスト
　下位モジュールから順に結合テストを行う、上位モジュールはダミーなどに置き換える

・受入テスト
　システムを納品するため、実際に利用する環境でシステムを利用して正しく動作するかを検証するテストのこと
　ユーザーの観点で要件を満たしているかを確認する工程

・セキュリティテスト
　システムやサーバーなどの不具合、バグ、設計ミスなどから、情報セキュリティ上の欠陥がないか調べるテストのこと
　非常に重要なテストで、セキュリティ上の欠陥が原因で顧客からの信頼を大きく低下させてしまうこともある

・SQLインジェクション
　不正なSQLコマンドをデータベースへ送り込むことでデータベースを操作する攻撃手法のこと
　攻撃者はフォームに意図的に不正な値を入力することで、データの読み取りや書き込み、削除が可能

・XSS（クロスサイトスクリプティング）
　Webシステムに対して不正なスクリプトを注入する攻撃のこと
　攻撃者はサイト上でのユーザー操作を盗み見たり、ログイン情報を盗む、悪質なサイトへ誘導したりすることができる

課題
三角形の種類を判定するアプリケーションのテスト

〇A,B,C辺の値がそれぞれ入力されているかどうか
　入力欄が空白となっている場合は「入力してください。」とメッセージを表示する

〇A,B,C辺の入力されている値が1~99までの整数値になっているかどうか
　以下の場合については「1から99までの整数を半角数字で入力してください。」とメッセージを表示する
・3桁以上の整数値が入力されていた場合
・0以下の整数値が入力されていた場合
・少数、分数、負の数、また「01」のように0から始まる数値が入力されていた場合
・数字以外の文字、記号、スペースが入力されていた場合
・全角数字、全角文字が入力されていた場合

〇三角形の種類判別について
　A,B,C辺の値についてそれぞれ1~99までの整数値が入力されている場合、「計算する」ボタンを押下した後、
　以下の数値の関係性に応じて特定のメッセージを表示する
・A,B,Cの全ての値が異なるときは「不等辺三角形」
・A,B,Cのうち2つが一致している場合は「二等辺三角形」
・A,B,Cのうち3つ全てが一致している場合は「正三角形」
※ただし、三角形の成立要件も考慮する必要があるため
「最も長い辺の長さ」が「他2辺の長さの和」以上になる場合は「要件を満たす三角形は存在しません」と表示する
　（例）A = 20, B =20, C =50 の場合、C >= A + B となり、三角形の成立要件を満たさない

・直角三角形を考慮すべきかどうか
　最も長い辺の長さの2乗　＝　他2辺の長さの2乗の和
　（例）　5^2 = 3^2 + 4^2
        25 = 9 + 16
　この場合は直角二等辺三角形は整数の範囲では存在しないので考慮しない


・入力された値に沿って三角形を描画するかどうか
・三角形の面積、角度（sin,cos）、重心等は必要ない

実際の動作
　入力欄が空白なら「入力してください。」と表示される
　1~99までの数字を入力した場合メッセージは表示されない
　それ以外の数字や文字、記号を入力した場合「1から99の整数を半角数字で入力してください。」ど表示される
　また全角数字で1~99までの数字を入力してもはじかれる
　A,B,Cの全てが1~99までの数字が入力されている場合に計算するボタンを押すと以下のようにメッセージが表示される
　A,B,Cの全ての値が異なるときは「不等辺三角形」と表示される
　A,B,Cのうち2つの値が一致している場合は「二等辺三角形」と表示される
　A,B,Cのうち3つ全ての値が一致している場合は「正三角形」と表示される