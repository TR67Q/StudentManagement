スタンダード第41回　開発の流れと手法　開発プロセスのフレームワーク

〇要求分析、要件定義
・アプリケーションの開発には「要件（してほしいこと）」があって、
　それを実現するための作り方や体制、仕組みなどを決定する
　「要件定義」「アーキテクチャ選定」

〇基本設計、詳細設計
・開発の「骨」、ここが決まっていないと全てが崩れてしまう
・全体設計には多大なコストがかかるが（数か月～数年）、品質の担保と天秤にかける必要がある

〇コーディング、コードレビュー
〇単体テスト、結合テスト、システムテスト、受け入れテスト

・V字モデル
　開発工程に対応したテスト工程
　要求分析：受け入れテスト、要件定義：システムテスト　など


〇要求分析
　システムに求める仕様を定義する、顧客が設定することもある
〇要件定義
　システムを動かすための使用を定義する、アーキテクチャ選定
　開発フレームワークの選定
〇基本設計
　システムの全体像を定義するため、要件を機能単位に分割
　画面のレイアウトなども決める
〇詳細設計
　仕様の詳細をまとめる
〇コーディング
　必要なプログラムを記述し、開発する
〇コードレビュー
　コーディングの機能のレビュー
　単体テストの内容とまとめてチェックする
〇単体テスト
　プログラムを構成する小さな単位（ユニット）が機能を正しくはたしているか検証する
　ブラックボックステスト、ホワイトボックステスト
〇結合テスト
　外部ツールを使って行うことが多い
　例）検索プログラム　＋　登録システム
〇システムテスト
　要件定義で作成した要件の内容に沿っているか確認
　負荷テスト、耐久テスト、セキュリティテスト
　モンキーテスト（ランダムに入力）
　これまでの工程が完璧にできていることが前提
〇受け入れテスト
　顧客に見てもらう

〇クラス図
　クラスの定義や関連性を視覚的に表現するための図
　Mermaid記法
　「ファイル名.md」でファイルを作成して「```mermaid」と「```」でサンプルを囲う
〇ER図
　エンティティ、属性、エンティティ間の関係性
　基本設計の手前、中の段階で作られる
〇シーケンス図
　ある動作に対するシステム処理の流れを視覚的に表現する
　時間軸が見える

・IntelliJ IDEA　→　Preferences　→　Language & Framework
  →　Markdown

〇開発プロセスのフレームワーク
　
　・ウォーターフォール開発
　上流から下流へと一方向、不可逆式
　顧客が完成までの期間をイメージしやすい、メンバーの入れ替えも簡単
　途中で問題が発生すると最悪破綻する
　そのためスケジュールに余裕を持たせることが多い
　仕様が明確なもの、変更が起きにくいものには使われることが多い
　
　・アジャイル開発（Agility、素早さ、敏捷性）
　変化に対応しながら、素早く価値を届けるための開発手法
　計画 → 設計 → 実装 → テスト（このサイクルをイテレーションという）を何度も繰り返す、
　前に戻ったりもする、スピード重視
　計画ミーティング、デイリースタンドアップ、ショーケース
　仮にイテレーションの中に不具合が発見されたとしても、その影響はイテレーション内で完結する
　被害が最小限で済む
　開発の方向性がぶれやすい、進捗管理が難しい
　全体像が把握できていないと大変

　・スクラム
　アジャイルの手法の1つ
　アジャイルは概念的、スクラムは開発手法を指す

    ・スプリント
    スプリントプランニング（計画）　→　
    デイリースクラム（日常的な進捗把握）　→　
    スプリントレビュー（ステークホルダーからフィードバック）　→　
    スプリントレトロスペクティブ（振り返り）

    ・スクラムチーム
    スクラムの基本単位
    プロダクトオーナー1：プロダクトの責任者
    スクラムマスター1：開発設計における障害の除去、スクラム内のルールを遵守させる
    開発者n