スタンダード第35回　REST_APIの解説

    ・REST APIとは...　REST Controllerの"REST"
    RESTというWeb上のコンピュータ間でコミュニケーションを簡単に取れるよう
    考案された設計様式にのっとって作成されたAPI
    画面の項目の状態を持たずに実装する
    RESTful API　は、厳格にRESTの原則を守っているもの

    Webブラウザ --  HTTPリクエスト -→  REST API（サーバー）

    Webブラウザ ←-  レスポンス     --  REST API（サーバー）

    （例）
    ・動画配信サービスにおける動画コンテンツ  /movies/12345
    ・ショッピングサイトのお気に入り        /wishitems
    ・GitHub上に作成した自分のリポジトリ    /username/repositories

    「REST API」を学ぶにあたって4つの設計原則を知っておく必要がある
    クライアントとサーバーのコミュニケーションとAPIの利便性を最適化するための指針

    １．ステートレス性
    ステートレスとは、状態の管理を行わないこと
    RESTでは常に同じ処理が行われることが前提、
    それを実現するために状態を持たないことが原則となっている

    ２．統一インターフェイス
    HTTPメソッドなど

    ３．アドレス可能性
    URL http://xxx.co.jp/users

    ４．接続性
    リソースをリンクで接続すること

    また、「RESTの原則」として以下の5つが存在する

    １．リソース指向アーキテクチャ
    ２．ステートレス　（　↔　ステートフル　）
    ３．キャッシュの使用
    ４．統一インターフェイス
    ５．クライアント・サーバー

    ・REST APIの設計ガイドライン
    適切なHTTPメソッドの使用（安全性の担保）
    （例）新しいユーザーを作成する際はPOSTメソッドを利用
        POST/api/users

    リソースの命名規則（直観的に見やすくなる）
    （例）すべての商品情報を取得する際は"products"
        GET/api/products

    URIの設計（階層的な構造、段階構造）
    （例）特定のユーザー情報を取得する際、ユーザーIDをURIのパラメータとして指定
        GET/api/users/{user_id}

    リクエストとレスポンスのフォーマット（フォーマットを統一）
    （例）
      POST/api/users

      Request Body:
      {
      "name":"John Doe",
      "email":"john@example.com",
      "age":30
      }

    エラーハンドリング（エラーの詳細を含める）
    （例）存在しないユーザーを取得しようとした場合のエラーレスポンスには
         適切なエラーメッセージを含める
       GET/api/users/9999

       Response:
       {
       "error":"User not found"
       }

    セキュリティ（適切なユーザーだけがリソースにアクセスできるようにする）
    （例）認証を必要とする場合は、ヘッダーにトークンを含めてリクエストする
      GET/api/users

      Headers:
      Authorization:Bearer{token}

    キャッシュの活用（適切なキャッシュ制御）
    （例）商品エンティティに対して、キャッシュ可能なレスポンスヘッダーを含める
      GET/api/products

      Response Headers:
      Cache-Control:public,max-age=3600

    バージョン管理（互換性）
    （例）APIのバージョンをURIに含める
      GET/api/v1/users

    ・REST APIの問題点・懸念点
    オーバーフェッチとアンダーフェッチ
    セキュリティの懸念
    性能と拡張性の制限
    バージョン管理
